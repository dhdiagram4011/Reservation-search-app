# Generated by Django 2.2.1 on 2020-04-02 13:23

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('authapp', '0004_auto_20200402_2126'),
    ]

    operations = [
        migrations.CreateModel(
            name='kauser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('koreanLastname', models.CharField(help_text='국문 이름을 입력해 주세요', max_length=200)),
                ('koreanFirstname', models.CharField(help_text='국문 성을 입력해 주세요', max_length=200)),
                ('englishLastname', models.CharField(help_text='영문 이름을 입력해 주세요', max_length=200)),
                ('englishFirstname', models.CharField(help_text='영문 성을 입력해 주세요', max_length=200)),
                ('birthday', models.DateField()),
                ('email', models.EmailField(help_text='해당 이메일 주소로 이메일 티켓이 발송됩니다', max_length=200)),
                ('password', models.CharField(help_text='패스워드를 입력하여 주세요', max_length=200)),
                ('address', models.CharField(max_length=200)),
                ('detailAddress', models.CharField(help_text='상세 주소를 입력해 주세요', max_length=200)),
                ('phoneNumber', models.CharField(help_text='핸드폰 번호를 입력해 주세요', max_length=200)),
                ('companyName', models.CharField(max_length=200)),
                ('department', models.CharField(max_length=200)),
                ('position', models.CharField(max_length=200)),
                ('fixedlineTelephone', models.CharField(help_text='유선전화번호를 입력해 주세요', max_length=200)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('published_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.DeleteModel(
            name='skyuser',
        ),
    ]
